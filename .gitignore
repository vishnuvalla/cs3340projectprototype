package cs3340prototype;

import java.util.Scanner;

/**
 *
 * @author Vishnu Vallatharasan
 */
public class CS3340Prototype {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        int[][] b = {{3,3,3,3,3,3,3,3,3},
                     {3,0,0,0,0,0,0,0,3},
                     {3,0,0,0,0,0,0,0,3},
                     {3,0,0,0,0,0,0,0,3},
                     {3,0,0,0,0,0,0,0,3},
                     {3,0,0,0,0,0,0,0,3},
                     {3,0,0,0,0,0,0,0,3},
                     {3,3,3,3,3,3,3,3,3}};
        boolean endCheck = false;
        Scanner input = new Scanner(System.in);
        
        System.out.println("   1  2  3  4  5  6  7");
        BoardReader(b);
        System.out.println("-------------------------");
        
        while (endCheck == false) {
            boolean player = true;
            int inInt = input.nextInt();
            int row = Placer(b,inInt,player);
            
            System.out.println("   1  2  3  4  5  6  7");
            BoardReader(b);
            System.out.println("-------------------------");
            
            if (winCheck(b,inInt,row,player) == true) {
                int playerNum = 0;
                if (player == true) {
                    playerNum = 1;
                }
                else {
                    playerNum = 2;
                }
                System.out.println("Player " + playerNum + " has won!");
                endCheck = true;
            }
            
            player = false;
            int cpuIn = CPUPlacer(b, player);
            row = Placer(b, cpuIn, player);
            
            System.out.println("   1  2  3  4  5  6  7");
            BoardReader(b);
            System.out.println("-------------------------");
            
            if (winCheck(b,cpuIn,row,player) == true) {
                int playerNum = 0;
                if (player == true) {
                    playerNum = 1;
                }
                else {
                    playerNum = 2;
                }
                System.out.println("Player " + playerNum + " has won!");
                endCheck = true;
            }
            
        }
        
    }
        
    public static void BoardReader(int[][] arr) {
        for (int j = 1; j < 7; j++) {
            System.out.print("||");
            for (int i = 1; i < 8; i++) {
                switch (arr[j][i]) {
                    case 0:
                        System.out.print("| |");
                        break;
                    case 1:
                        System.out.print("|X|");
                        break;
                    default:
                        System.out.print("|O|");
                        break;
                }
            }
            System.out.println("||");
        }
    }
    
    public static int Placer(int[][] arr, int inRC, boolean player) {
        int pos = inRC;
        int who;
        if (player == true) {
            who = 1;
        }
        else {
            who = 2;
        }
        for (int i = 1; i < 7; i++) {
            if ((arr[i][pos] == 0) && (arr[i+1][pos] != 0)) {
                arr[i][pos] = who;
                return i;
            }
        }
        return -1;
    }
    
    public static boolean winCheck(int[][] arr, int inRC, int inLR, boolean player) {
        int Rcol = inRC;
        int Lrow = inLR;
        int who;
        int count = 0;
        if (player == true) {
            who = 1;
        }
        else {
            who = 2;
        }
        
        for (int i = 1; i < 8; i++) {
            if (arr[Lrow][i] == who) {
                count++;
            }
            else {
                count = 0;
            }
            if (count == 4) {
                return true;
            }
        }
        count = 0;
        for (int i = 1; i < 7; i++) {
            if (arr[i][Rcol] == who) {
                count++;
            }
            else {
                count = 0;
            }
            if (count == 4) {
                return true;
            }
        }
        count = 0;
        
        int i = Rcol;
        int j = Lrow;
        while (arr[j][i] != 3) {
            j++;i++;
        }
        do {
            j--;i--;
            if (arr[j][i] == who) {
                count++;
            }
            else {
                count = 0;
            }
        }while (arr[j][i] != 3)
        if (count == 4) {
            return true;
        }
        count = 0;   
        i = Rcol;
        j = Lrow;
        
        while (arr[j][i] != 3) {
            j++;i--;
        }
        do {
            j--;i++;
            if (arr[j][i] == who) {
                count++;
            }
            else {
                count = 0;
            }
        }while (arr[j][i] != 3)
        if (count == 4) {
            return true;
        }
        return false;
    }
    
    public static int CPUPlacer(int[][] arr, boolean player) {
        int[] outcomes = {0,0,0,0,0,0,0};
        int who;
        int count = 0;
        int maxCt = 0;
        if (player == true) {
            who = 1;
        }
        else {
            who = 2;
        }
        
        for (int j = 1; j < 8; j++) {
            for (int i = 1; i < 7; i++) {
                if ((arr[i][j] == 0) && (arr[i+1][j] != 0)) {
                    arr[i][j] = who;
                    for (int k = 1; k < 8; k++) {
                        if (arr[i][k] == who) {
                            count++;
                            if (count > maxCt) {
                                maxCt = count;
                            }
                        }
                        else {
                            count = 0;
                        }
                    }
                    count = 0;
                    for (int k = 1; k < 7; k++) {
                        if (arr[k][j] == who) {
                            count++;
                            if (count > maxCt) {
                                maxCt = count;
                            }
                        }
                        else {
                            count = 0;
                        }
                    }
                    count = 0;
                    
                    int x = j;
                    int y = i;
                    while (arr[y+1][x+1] != 3) {
                        y++;x++;
                    }
                    while (arr[y-1][x-1] != 3) {
                        y--;x--;
                        if (arr[y][x] == who) {
                            count++;
                            if (count > maxCt) {
                                maxCt = count;
                            }
                        }
                        else {
                            count = 0;
                        }
                    }
                    x = j;
                    y = i;
                    
                    while (arr[y-1][x+1] != 3) {
                        y--;x++;
                    }
                    while (arr[y+1][x-1] != 3) {
                        y++;x--;
                        if (arr[y][x] == who) {
                            count++;
                            if (count > maxCt) {
                                maxCt = count;
                            }
                        }
                        else {
                            count = 0;
                        }
                    }
                    arr[i][j] = 0;
                    count = 0;
                    outcomes[j-1] = maxCt;
                    maxCt = 0;
                }
            }
        }
        if (who == 1) {
            who = 2;
        }
        else {
            who = 1;
        }
        
        for (int j = 1; j < 8; j++) {
            for (int i = 1; i < 7; i++) {
                if ((arr[i][j] == 0) && (arr[i+1][j] != 0)) {
                    arr[i][j] = who;
                    for (int k = 1; k < 8; k++) {
                        if (arr[i][k] == who) {
                            count++;
                            if (count > maxCt) {
                                maxCt = count;
                            }
                        }
                        else {
                            count = 0;
                        }
                    }
                    count = 0;
                    for (int k = 1; k < 7; k++) {
                        if (arr[k][j] == who) {
                            count++;
                            if (count > maxCt) {
                                maxCt = count;
                            }
                        }
                        else {
                            count = 0;
                        }
                    }
                    count = 0;
                    
                    int x = j;
                    int y = i;
                    while (arr[y+1][x+1] != 3) {
                        y++;x++;
                    }
                    while (arr[y-1][x-1] != 3) {
                        y--;x--;
                        if (arr[y][x] == who) {
                            count++;
                            if (count > maxCt) {
                                maxCt = count;
                            }
                        }
                        else {
                            count = 0;
                        }
                    }
                    x = j;
                    y = i;
                    
                    while (arr[y-1][x+1] != 3) {
                        y--;x++;
                    }
                    while (arr[y+1][x-1] != 3) {
                        y++;x--;
                        if (arr[y][x] == who) {
                            count++;
                            if (count > maxCt) {
                                maxCt = count;
                            }
                        }
                        else {
                            count = 0;
                        }
                    }
                    arr[i][j] = 0;
                    count = 0;
                    if (maxCt > outcomes[j-1]) {
                        outcomes[j-1] = maxCt;
                    }
                    maxCt = 0;
                }
            } //teleport here
        }
        int max = 0;
        int pos = 0;
        for (int i = 0; i < 7; i++) {
            if (outcomes[i] > max) {
                max = outcomes[i];
                pos = i+1;
            }
        }
        return pos;
    }
    
}

